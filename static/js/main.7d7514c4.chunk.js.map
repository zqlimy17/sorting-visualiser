{"version":3,"sources":["Sorter/Components/SlideBar.js","Sorter/Components/Main.js","Sorter/Components/Method.js","Algorithms/Merge.js","Algorithms/Helpers/Swap.js","Algorithms/Quick.js","Algorithms/Heap.js","Sorter/Sorter.js","Algorithms/Bubble.js","Algorithms/Cocktail.js","Algorithms/Selection.js","Algorithms/Insertion.js","App.js","index.js"],"names":["useStyles","makeStyles","root","width","display","child","margin","flex","SlideBar","arrSize","setArrSize","speed","setSpeed","sorting","classes","className","Typography","Slider","disabled","value","onChange","event","newValue","window","localStorage","setItem","defaultValue","step","min","max","valueLabelDisplay","marginTop","height","justifyContent","bar","Main","arr","useEffect","map","item","index","key","id","style","Method","allMethods","method","setMethod","execute","sorted","ButtonGroup","m","Button","variant","onClick","color","mergeSortAnimation","array","animate","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIndex","endIndex","middleIndex","Math","floor","k","i","j","push","doMerge","swap","a","b","temp","quickSortAnimation","quickSort","start","end","pivotIndex","pivotValue","partition","heapify","n","largest","left","right","WINDOW_HEIGHT","innerHeight","Sorter","useState","setArr","getItem","scans","setScans","swaps","setSwaps","time","setTime","setSorting","parseInt","parseFloat","setSorted","rebuild","setRebuild","val","random","error","console","log","message","buildArr","mergeSort","bubbleSort","heapSort","cocktailSort","selectionSort","insertionSort","animation","tempScans","tempSwaps","arrayBars","document","getElementsByClassName","type","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","barTwoIdx","bubbleSortAnimation","heapSortAnimation","swapped","cocktailSortAnimation","selectionSortAnimation","insertionSortAnimation","marginLeft","location","reload","toFixed","theme","createMuiTheme","palette","primary","teal","secondary","lime","App","ThemeProvider","Container","maxWidth","href","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d7514c4.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n\nconst useStyles = makeStyles({\n    root: {\n        width: \"100%\",\n        display: \"flex\",\n    },\n\n    child: {\n        margin: \"0 20px\",\n        flex: 1,\n    },\n});\n\nconst SlideBar = ({ arrSize, setArrSize, speed, setSpeed, sorting }) => {\n    const classes = useStyles();\n    const handleSize = (event, newValue) => {\n        setArrSize(newValue);\n        window.localStorage.setItem(\"size\", arrSize);\n    };\n\n    const handleSpeed = (event, newValue) => {\n        setSpeed(newValue);\n        window.localStorage.setItem(\"speed\", speed);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Typography>Range Size: </Typography>\n            <Slider\n                disabled={sorting}\n                className={classes.child}\n                value={arrSize}\n                onChange={handleSize}\n                defaultValue={50}\n                step={2}\n                min={4}\n                max={300}\n                valueLabelDisplay='on'\n            />\n            <Typography>Speed (miliseconds): </Typography>\n            <Slider\n                disabled={sorting}\n                className={classes.child}\n                value={speed}\n                onChange={handleSpeed}\n                defaultValue={3}\n                step={0.5}\n                min={0.5}\n                max={100}\n                valueLabelDisplay='on'\n            />\n        </div>\n    );\n};\n\nexport default SlideBar;\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n    root: {\n        marginTop: 10,\n        width: \"100%\",\n        height: 400,\n        display: \"flex\",\n        justifyContent: \"space-between\",\n    },\n    bar: {\n        margin: \"0 1px\",\n        width: \"100%\",\n    },\n});\n\nconst Main = ({ arr }) => {\n    const classes = useStyles();\n    useEffect(() => {});\n\n    return (\n        <div className={classes.root}>\n            {arr.map((item, index) => (\n                <div\n                    key={index}\n                    id={index}\n                    className={`${classes.bar} array-bar`}\n                    style={{ height: `${item}px` }}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default Main;\n","import React, { Fragment } from \"react\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\n\nconst Method = ({\n    allMethods,\n    method,\n    setMethod,\n    execute,\n    sorting,\n    sorted,\n}) => {\n    return (\n        <Fragment>\n            <ButtonGroup>\n                {allMethods.map((m, index) => (\n                    <Button\n                        key={index}\n                        variant={method === m ? \"contained\" : \"outlined\"}\n                        onClick={() => {\n                            setMethod(m);\n                            window.localStorage.setItem(\"method\", m);\n                        }}\n                        color='primary'\n                        disabled={sorting}\n                    >\n                        {m}\n                    </Button>\n                ))}\n\n                <Button\n                    variant='contained'\n                    color='secondary'\n                    onClick={() => {\n                        execute();\n                    }}\n                    disabled={sorting || sorted}\n                >\n                    Execute {method} Sort!\n                </Button>\n            </ButtonGroup>\n        </Fragment>\n    );\n};\n\nexport default Method;\n","// export function mergeSort(array) {\n//     if (array.length === 1) return array;\n//     const middleIndex = Math.floor(array.length / 2);\n//     const firstHalf = mergeSort(array.slice(0, middleIndex));\n//     const secondHalf = mergeSort(array.slice(middleIndex));\n//     const sortedArray = [];\n//     let i = 0,\n//         j = 0;\n//     while (i < firstHalf.length && j < secondHalf.length) {\n//         if (firstHalf[i] < secondHalf[j]) {\n//             sortedArray.push(firstHalf[i++]);\n//         } else {\n//             sortedArray.push(secondHalf[j++]);\n//         }\n//     }\n//     while (i < firstHalf.length) sortedArray.push(firstHalf[i++]);\n//     while (j < secondHalf.length) sortedArray.push(secondHalf[j++]);\n//     return sortedArray;\n// }\n\nexport function mergeSortAnimation(array) {\n    const animate = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animate);\n    animate.push([4, 0, 0]);\n    return animate;\n}\n\nfunction mergeSortHelper(\n    mainArray,\n    startIndex,\n    endIndex,\n    auxiliaryArray,\n    animate\n) {\n    if (startIndex === endIndex) return;\n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    mergeSortHelper(\n        auxiliaryArray,\n        startIndex,\n        middleIndex,\n        mainArray,\n        animate\n    );\n    mergeSortHelper(\n        auxiliaryArray,\n        middleIndex + 1,\n        endIndex,\n        mainArray,\n        animate\n    );\n    doMerge(\n        mainArray,\n        startIndex,\n        middleIndex,\n        endIndex,\n        auxiliaryArray,\n        animate\n    );\n}\n\nfunction doMerge(\n    mainArray,\n    startIndex,\n    middleIndex,\n    endIndex,\n    auxiliaryArray,\n    animate\n) {\n    let k = startIndex;\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while (i <= middleIndex && j <= endIndex) {\n        animate.push([0, i, j]);\n        animate.push([1, i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n            // We overwrite the value at index k in the original array with the\n            // value at index i in the auxiliary array.\n            animate.push([2, k, auxiliaryArray[i]]);\n            mainArray[k++] = auxiliaryArray[i++];\n        } else {\n            // We overwrite the value at index k in the original array with the\n            // value at index j in the auxiliary array.\n            animate.push([2, k, auxiliaryArray[j]]);\n            mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIndex) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animate.push([0, i, i]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animate.push([1, i, i]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animate.push([2, k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIndex) {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animate.push([0, j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animate.push([1, j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animate.push([2, k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n\n// export function mergeSortAnimation(array) {\n//     const aux = new Array(...array);\n//     console.log(aux);\n//     const animate = [];\n\n//     mergeSort(array, aux, animate);\n\n//     animate.push([4, 0, 0]);\n//     return animate;\n// }\n\n// function mergeSort(array, aux, animate) {\n//     let n = array.length;\n//     if (n === 1) return array;\n\n//     let arrayOne = array.slice(0, Math.floor(n / 2));\n//     let arrayTwo = array.slice(Math.floor(n / 2), n);\n\n//     arrayOne = mergeSort(arrayOne, aux, animate);\n//     arrayTwo = mergeSort(arrayTwo, aux, animate);\n\n//     return merge(arrayOne, arrayTwo, aux, animate);\n// }\n\n// function merge(a, b, aux, animate) {\n//     let c = [];\n\n//     while (a.length > 0 && b.length > 0) {\n//         animate.push([0, aux.indexOf(a[0]), aux.indexOf(b[0])]);\n//         animate.push([1, aux.indexOf(a[0]), aux.indexOf(b[0])]);\n//         if (a[0] > b[0]) {\n//             animate.push([2, aux.indexOf(b[0]), 0]);\n//             c.push(b.shift());\n//         } else {\n//             animate.push([2, aux.indexOf(a[0]), 0]);\n\n//             c.push(a.shift());\n//         }\n//     }\n//     while (a.length > 0) {\n//         animate.push([2, aux.indexOf(a[0]), 0]);\n//         c.push(a.shift());\n//     }\n//     while (b.length > 0) {\n//         animate.push([2, aux.indexOf(b[0]), 0]);\n//         c.push(b.shift());\n//     }\n//     return c;\n// }\n","export function swap(array, a, b) {\n    let temp = array[a];\n    array[a] = array[b];\n    array[b] = temp;\n}\n","import { swap } from \"./Helpers/Swap\";\n\nexport function quickSortAnimation(array) {\n    const animate = [];\n    quickSort(array, 0, array.length - 1, animate);\n    animate.push([4, 0, 0]);\n    return animate;\n}\n\nfunction quickSort(array, start, end, animate) {\n    if (start >= end) return;\n    let index = partition(array, start, end, animate);\n    quickSort(array, start, index - 1, animate);\n    quickSort(array, index + 1, end, animate);\n}\n\nfunction partition(array, start, end, animate) {\n    let pivotIndex = start;\n    let pivotValue = array[end];\n    for (let i = start; i < end; i++) {\n        animate.push([0, i, pivotIndex]);\n        if (array[i] < pivotValue) {\n            swap(array, i, pivotIndex);\n            animate.push([2, i, pivotIndex]);\n            animate.push([1, i, pivotIndex]);\n            pivotIndex++;\n        }\n        animate.push([1, i, pivotIndex]);\n    }\n    swap(array, pivotIndex, end);\n    animate.push([2, pivotIndex, end]);\n    animate.push([1, pivotIndex, end]);\n    return pivotIndex;\n}\n","import { swap } from \"./Helpers/Swap\";\n\nexport function heapSortAnimation(array) {\n    const animate = [];\n    let n = array.length;\n\n    // building max heap\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n        heapify(array, n, i, animate);\n    }\n\n    for (let i = n - 1; i > 0; i--) {\n        animate.push([2, i, 0]);\n        swap(array, i, 0, animate);\n        heapify(array, i, 0, animate);\n    }\n\n    animate.push([4, 0, 0]);\n    return animate;\n}\n\nfunction heapify(array, n, i, animate) {\n    animate.push([0, n - 1, i]);\n    let largest = i;\n    let left = 2 * i + 1;\n    let right = 2 * i + 2;\n    if (left < n && array[i] < array[left]) {\n        largest = left;\n    }\n    if (right < n && array[largest] < array[right]) {\n        largest = right;\n    }\n    if (largest !== i) {\n        animate.push([2, i, largest]);\n        swap(array, i, largest);\n        animate.push([3, i, largest]);\n        heapify(array, n, largest, animate);\n    }\n    animate.push([1, n - 1, i]);\n}\n","import React, { useState, useEffect, Fragment } from \"react\";\nimport SlideBar from \"./Components/SlideBar\";\nimport Main from \"./Components/Main\";\nimport Method from \"./Components/Method\";\nimport { Button, ButtonGroup } from \"@material-ui/core\";\nimport { mergeSortAnimation } from \"../Algorithms/Merge\";\nimport { quickSortAnimation } from \"../Algorithms/Quick\";\nimport { bubbleSortAnimation } from \"../Algorithms/Bubble\";\nimport { heapSortAnimation } from \"../Algorithms/Heap\";\nimport { cocktailSortAnimation } from \"../Algorithms/Cocktail\";\nimport { selectionSortAnimation } from \"../Algorithms/Selection\";\nimport { insertionSortAnimation } from \"../Algorithms/Insertion\";\nimport \"./Sorter.css\";\n\nconst WINDOW_HEIGHT = window.innerHeight;\n\nconst Sorter = () => {\n    const [allMethods] = useState([\n        \"merge\",\n        \"quick\",\n        \"bubble\",\n        \"heap\",\n        \"cocktail\",\n        \"selection\",\n        \"insertion\",\n    ]);\n    const [arr, setArr] = useState([]);\n    const [method, setMethod] = useState(\n        window.localStorage.getItem(\"method\") || \"quick\"\n    );\n\n    // stats\n    const [scans, setScans] = useState(0);\n    const [swaps, setSwaps] = useState(0);\n    const [time, setTime] = useState(0);\n\n    // miscellaneous\n    const [sorting, setSorting] = useState(false); // disables button click when sorting\n    const [arrSize, setArrSize] = useState(\n        parseInt(window.localStorage.getItem(\"size\")) || 50\n    );\n    const [speed, setSpeed] = useState(\n        parseFloat(window.localStorage.getItem(\"speed\")) || 3\n    ); // speed in milliseconds for the algorithm\n    const [sorted, setSorted] = useState(false);\n    const [rebuild, setRebuild] = useState(false);\n\n    // initialising / building array\n    useEffect(() => {\n        const buildArr = () => {\n            try {\n                setArr([]);\n                setSorted(false);\n                for (let i = 0; i < arrSize; i++) {\n                    let val = Math.floor(\n                        ((Math.random() + 0.01) * WINDOW_HEIGHT * 7.5) / 10\n                    );\n                    setArr((arr) => [...arr, val]);\n                }\n            } catch (error) {\n                console.log(error.message);\n            }\n        };\n        buildArr();\n    }, [arrSize, rebuild]);\n\n    // resetting array\n    const reset = () => {\n        try {\n            setArrSize(50);\n            setSpeed(3);\n            setMethod(\"merge\");\n            window.localStorage.setItem(\"method\", \"merge\");\n            window.localStorage.setItem(\"size\", arrSize);\n            window.localStorage.setItem(\"speed\", speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    // runs one of the sorting methods when \"execute\" is clicked\n    const execute = async () => {\n        try {\n            await setTime(0);\n            await setScans(0);\n            await setSwaps(0);\n            await setSorting(true);\n            switch (method) {\n                case \"merge\":\n                    await mergeSort();\n                    break;\n                case \"quick\":\n                    await quickSort();\n                    break;\n                case \"bubble\":\n                    await bubbleSort();\n                    break;\n                case \"heap\":\n                    await heapSort();\n                    break;\n                case \"cocktail\":\n                    await cocktailSort();\n                    break;\n                case \"selection\":\n                    await selectionSort();\n                    break;\n                case \"insertion\":\n                    await insertionSort();\n                    break;\n                default:\n                    console.log(`Error`);\n            }\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    // sorting methods\n    const mergeSort = () => {\n        try {\n            const animation = mergeSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type] = animation[i];\n                if (type === 0) {\n                    const barOneStyle = arrayBars[animation[i][1]].style;\n                    const barTwoStyle = arrayBars[animation[i][2]].style;\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"white\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        const barOneStyle = arrayBars[animation[i][1]].style;\n                        const barTwoStyle = arrayBars[animation[i][2]].style;\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        const barOneStyle = arrayBars[animation[i][1]].style;\n                        barOneStyle.backgroundColor = \"red\";\n                        barOneStyle.height = `${animation[i][2]}px`;\n                    }, i * speed);\n                    setTimeout(() => {\n                        const barOneStyle = arrayBars[animation[i][1]].style;\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed + speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const quickSort = () => {\n        try {\n            const animation = quickSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type, barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                if (type === 0) {\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"white\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cyan\";\n                        barTwoStyle.backgroundColor = \"cyan\";\n                        let temp = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = temp;\n                    }, i * speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const bubbleSort = () => {\n        try {\n            const animation = bubbleSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type, barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                if (type === 0) {\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"white\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"red\";\n                        barTwoStyle.backgroundColor = \"red\";\n                        let temp = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = temp;\n                    }, i * speed);\n                } else if (type === 3) {\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = \"cyan\";\n                    }, i * speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const heapSort = () => {\n        try {\n            const animation = heapSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type, barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                if (type === 0) {\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"white\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cyan\";\n                        barTwoStyle.backgroundColor = \"red\";\n                        let temp = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = temp;\n                    }, i * speed);\n                } else if (type === 3) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"red\";\n                    }, i * speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const cocktailSort = () => {\n        try {\n            const animation = cocktailSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type, barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                if (type === 0) {\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"white\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"red\";\n                        barTwoStyle.backgroundColor = \"red\";\n                        let temp = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = temp;\n                    }, i * speed);\n                } else if (type === 3) {\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = \"cyan\";\n                    }, i * speed);\n                } else if (type === 5) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cyan\";\n                    }, i * speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const selectionSort = () => {\n        try {\n            const animation = selectionSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type, barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                if (type === 0) {\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"red\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"red\";\n                        barTwoStyle.backgroundColor = \"red\";\n                        let temp = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = temp;\n                    }, i * speed);\n                } else if (type === 3) {\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = \"cyan\";\n                    }, i * speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    const insertionSort = () => {\n        try {\n            let animation = insertionSortAnimation(arr);\n            let tempScans = 0;\n            let tempSwaps = 0;\n            for (let i = 0; i < animation.length; i++) {\n                const arrayBars = document.getElementsByClassName(\"array-bar\");\n                const [type, barOneIdx, barTwoIdx] = animation[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                if (type === 0) {\n                    tempScans++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"white\";\n                        barTwoStyle.backgroundColor = \"red\";\n                    }, i * speed);\n                } else if (type === 1) {\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"cadetblue\";\n                        barTwoStyle.backgroundColor = \"cadetblue\";\n                    }, i * speed);\n                } else if (type === 2) {\n                    tempSwaps++;\n                    setTimeout(() => {\n                        barOneStyle.backgroundColor = \"red\";\n                        // barTwoStyle.backgroundColor = \"red\";\n                        let temp = barOneStyle.height;\n                        barOneStyle.height = barTwoStyle.height;\n                        barTwoStyle.height = temp;\n                    }, i * speed);\n                } else if (type === 3) {\n                    setTimeout(() => {\n                        barTwoStyle.backgroundColor = \"cyan\";\n                        barOneStyle.backgroundColor = \"cyan\";\n                    }, i * speed);\n                } else if (type === 4) {\n                    for (let j = 0; j < arrayBars.length; j++) {\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"lime\";\n                        }, i * speed);\n                        setTimeout(() => {\n                            arrayBars[j].style.backgroundColor = \"cadetblue\";\n                        }, i * speed + 1500);\n                    }\n                }\n            }\n            setTimeout(() => {\n                setSorted(true);\n                setScans(tempScans);\n                setSwaps(tempSwaps);\n                setTime(tempScans * speed);\n                setSorting(false);\n            }, animation.length * speed);\n        } catch (error) {\n            console.log(error.message);\n        }\n    };\n\n    return (\n        <div>\n            <SlideBar\n                arrSize={arrSize}\n                setArrSize={setArrSize}\n                sorting={sorting}\n                speed={speed}\n                setSpeed={setSpeed}\n            />\n            <Method\n                method={method}\n                setMethod={setMethod}\n                execute={execute}\n                sorting={sorting}\n                sorted={sorted}\n                allMethods={allMethods}\n            />\n            <ButtonGroup>\n                <Button\n                    style={{ marginLeft: \"20px\" }}\n                    variant='contained'\n                    onClick={() => setRebuild(!rebuild)}\n                    disabled={sorting}\n                    color={sorted ? \"secondary\" : \"primary\"}\n                >\n                    New Range\n                </Button>\n                <Button\n                    variant='contained'\n                    onClick={() => {\n                        window.location.reload();\n                    }}\n                    color='primary'\n                >\n                    Clear\n                </Button>\n                <Button\n                    variant='contained'\n                    onClick={reset}\n                    color='primary'\n                    disabled={sorting}\n                >\n                    Reset\n                </Button>\n            </ButtonGroup>\n            <div className='statsbar'>\n                {scans ? (\n                    <Fragment>\n                        <span className='stats'>Total Scans: </span>\n                        <span className='nstats'>{scans}</span>\n                    </Fragment>\n                ) : (\n                    \"\"\n                )}\n                {swaps ? (\n                    <Fragment>\n                        <span className='stats'>Total Swaps: </span>\n                        <span className='nstats'>{swaps}</span>\n                    </Fragment>\n                ) : (\n                    \"\"\n                )}\n                {time ? (\n                    <Fragment>\n                        <span className='stats'>Time Taken: </span>\n                        <span className='nstats'>{time.toFixed(2)}</span>\n                        <span className='xstats'>ms</span>\n                    </Fragment>\n                ) : (\n                    \"\"\n                )}\n            </div>\n\n            <Main arr={arr} />\n        </div>\n    );\n};\n\nexport default Sorter;\n","import { swap } from \"./Helpers/Swap\";\n\nexport function bubbleSortAnimation(array) {\n    const animate = [];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0; j < array.length - i - 1; j++) {\n            animate.push([0, j, j + 1]);\n            if (array[j] > array[j + 1]) {\n                animate.push([2, j, j + 1]);\n                swap(array, j, j + 1);\n            }\n            animate.push([1, j, j + 1]);\n        }\n        animate.push([3, 0, array.length - 1 - i]);\n    }\n    animate.push([4, 0, 0]);\n\n    return animate;\n}\n","import { swap } from \"./Helpers/Swap\";\nexport function cocktailSortAnimation(array) {\n    const animate = [];\n\n    let n = array.length,\n        swapped = true,\n        start = 0,\n        end = n - 1;\n\n    while (swapped) {\n        swapped = false;\n\n        for (let i = start; i < end; i++) {\n            animate.push([0, i, i + 1]);\n            if (array[i] > array[i + 1]) {\n                animate.push([2, i, i + 1]);\n                swap(array, i, i + 1);\n                swapped = true;\n            }\n            animate.push([1, i, i + 1]);\n            if (i === end - 1) {\n                animate.push([3, 0, i + 1]);\n            }\n        }\n\n        if (!swapped) break;\n        swapped = false;\n        end = end - 1;\n\n        for (let i = end - 1; i >= start; i--) {\n            animate.push([0, i, i + 1]);\n            if (array[i] > array[i + 1]) {\n                animate.push([2, i, i + 1]);\n                swap(array, i, i + 1);\n                swapped = true;\n            }\n            animate.push([1, i, i + 1]);\n            if (i === start) {\n                animate.push([5, i, 0]);\n            }\n        }\n        start = start + 1;\n    }\n    // for (let i = 0; i < array.length; i++) {\n    //     for (let j = 0; j < array.length - i - 1; j++) {\n    //         animate.push([0, j, j + 1]);\n    //         if (array[j] > array[j + 1]) {\n    //             animate.push([2, j, j + 1]);\n    //             swap(array, j, j + 1);\n    //         }\n    //         animate.push([1, j, j + 1]);\n    //     }\n    //     animate.push([3, 0, array.length - 1 - i]);\n    // }\n    animate.push([4, 0, 0]);\n\n    return animate;\n}\n","import { swap } from \"./Helpers/Swap\";\nexport function selectionSortAnimation(array) {\n    const animate = [];\n    for (let j = 0; j < array.length - 1; j++) {\n        let min = j;\n        for (let i = j + 1; i < array.length; i++) {\n            animate.push([0, i, min]);\n            animate.push([1, i, min]);\n            if (array[i] <= array[min]) min = i;\n        }\n        if (min !== j) {\n            animate.push([2, min, j]);\n            animate.push([3, min, j]);\n            swap(array, min, j);\n        } else {\n            animate.push([3, min, j]);\n        }\n    }\n    animate.push([4, 0, 0]);\n    return animate;\n}\n","export function insertionSortAnimation(array) {\n    let animate = [];\n\n    for (let i = 1; i < array.length; i++) {\n        let key = array[i];\n        let j = i - 1;\n        animate.push([0, j, i]);\n        animate.push([3, j, i]);\n        while (j >= 0 && key < array[j]) {\n            animate.push([2, j, j + 1]);\n            animate.push([3, j, j + 1]);\n            array[j + 1] = array[j];\n            j--;\n        }\n\n        array[j + 1] = key;\n    }\n    animate.push([4, 0, 0]);\n    return animate;\n}\n","import React from \"react\";\nimport Sorter from \"./Sorter/Sorter\";\nimport \"./App.css\";\nimport { Container } from \"@material-ui/core\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\nimport { teal, lime } from \"@material-ui/core/colors\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport LinkedIn from \"@material-ui/icons/LinkedIn\";\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: teal,\n        secondary: lime,\n    },\n});\n\nfunction App() {\n    return (\n        <ThemeProvider theme={theme}>\n            <Container maxWidth='xl' className='App'>\n                <h1>Visual Sorting Algorithms</h1>\n                <Sorter />\n                <footer>\n                    <a href='https://www.linkedin.com/in/zqlimy/'>\n                        <LinkedIn />\n                    </a>{\" \"}\n                    <a href='https://github.com/zqlimy17/'>\n                        <GitHubIcon />\n                    </a>\n                </footer>\n            </Container>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}